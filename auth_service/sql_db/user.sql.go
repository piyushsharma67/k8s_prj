// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sql_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO users (name, email, password,is_active, created_at)
VALUES ($1, $2, $3,$4, CURRENT_TIMESTAMP)
RETURNING id, name, email, password,is_active, created_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
	IsActive pgtype.Bool
}

// database/queries/user.sql
// Create user
// params: CreateUserParams
// returns: User
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.IsActive,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password,is_active, created_at
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID        int32
	Name      string
	Email     string
	Password  string
	IsActive  pgtype.Bool
	CreatedAt pgtype.Timestamp
}

// Get user by email
// params: GetUserByEmailParams
// returns: User
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
