// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package sql_db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec

INSERT INTO users (name, email, password, created_at)
VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
RETURNING id, name, email, password, created_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

// database/queries/user.sql
// Create user
// params: CreateUserParams
// returns: User
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.Email, arg.Password)
	return err
}

const getUserAllPhotos = `-- name: GetUserAllPhotos :many
SELECT id, user_id, file_url, created_at
FROM uploaded_files
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetUserAllPhotosParams struct {
	UserID int32
	Limit  int32
	Offset int32
}

type GetUserAllPhotosRow struct {
	ID        int32
	UserID    int32
	FileUrl   string
	CreatedAt pgtype.Timestamp
}

// params: UserID
// returns: UploadedFile
func (q *Queries) GetUserAllPhotos(ctx context.Context, arg GetUserAllPhotosParams) ([]GetUserAllPhotosRow, error) {
	rows, err := q.db.Query(ctx, getUserAllPhotos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserAllPhotosRow
	for rows.Next() {
		var i GetUserAllPhotosRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FileUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at
FROM users
WHERE email = $1
`

// Get user by email
// params: GetUserByEmailParams
// returns: User
func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
